name: Build

on:
  push:
    branches:
      - master
      - development
  pull_request:
    branches:
      - master
      - development
  release:
    types:
      - created

jobs:
  build:
    strategy:
      matrix:
        os: [[ubuntu-latest,x64-linux,gcc], [ubuntu-latest,x64-linux,clang], [windows-latest,x64-windows-static,msvc]]
        buildType: [Release]

    runs-on: ${{ matrix.os[0] }}

    steps:
    - uses: actions/checkout@v2

    - name: Setup vcpkg
      if: runner.os != 'Linux'
      uses: lukka/run-vcpkg@v4
      with:
        vcpkgGitCommitId: '11be87ec561d9d70dc527afad886744fe149c2ce'
        setupOnly: true
  
    - name: Install necessary G++ version (Linux)
      if: runner.os == 'Linux' && matrix.os[2] == 'gcc'
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y --no-install-recommends ccache gcc-10 g++-10 libgtk-3-dev libwxgtk3.0-gtk3-dev

    - name: Install necessary Clang++ version (Linux)
      if: runner.os == 'Linux' && matrix.os[2] == 'clang'
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y --no-install-recommends ccache clang-12 clang++-12 libgtk-3-dev libwxgtk3.0-gtk3-dev

    - name: Create Build Environment
      run: cmake -E make_directory ${{runner.workspace}}/build-${{ matrix.buildType }}

    - name: Configure GCC version (Linux)
      if: runner.os == 'Linux' && matrix.os[2] == 'gcc'
      shell: bash
      working-directory: ${{runner.workspace}}/build-${{ matrix.buildType }}
      run: echo "CC=gcc-10" >> $GITHUB_ENV

    - name: Configure G++ version (Linux)
      if: runner.os == 'Linux' && matrix.os[2] == 'gcc'
      shell: bash
      working-directory: ${{runner.workspace}}/build-${{ matrix.buildType }}
      run: echo "CXX=g++-10" >> $GITHUB_ENV

    - name: Configure Clang version (Linux)
      if: runner.os == 'Linux' && matrix.os[2] == 'clang'
      shell: bash
      working-directory: ${{runner.workspace}}/build-${{ matrix.buildType }}
      run: echo "CC=clang-12" >> $GITHUB_ENV

    - name: Configure Clang++ version (Linux)
      if: runner.os == 'Linux' && matrix.os[2] == 'clang'
      shell: bash
      working-directory: ${{runner.workspace}}/build-${{ matrix.buildType }}
      run: echo "CXX=clang++-12" >> $GITHUB_ENV

    - name: Install necessary packages
      if: runner.os != 'Linux'
      shell: bash
      run: $VCPKG_ROOT/vcpkg install wxwidgets:${{ matrix.os[1] }}

    - name: Checkout submodules
      run: |
        git submodule update --init -- "CMake"
        git submodule update --init --recursive -- "source/wxCharts"

    - name: Configure CMake
      if: runner.os != 'Linux'
      id: configure-other
      shell: bash
      working-directory: ${{runner.workspace}}/build-${{ matrix.buildType }}
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=${{ matrix.buildType }} -DCMAKE_TOOLCHAIN_FILE=$GITHUB_WORKSPACE/vcpkg/scripts/buildsystems/vcpkg.cmake -DCMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE/package/Aria

    - name: Configure CMake
      if: runner.os == 'Linux'
      id: configure-linux
      shell: bash
      working-directory: ${{runner.workspace}}/build-${{ matrix.buildType }}
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=${{ matrix.buildType }} -DCMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE/package/Aria

    - name: Build
      if: ((steps.configure-linux.conclusion == 'success') || (steps.configure-other.conclusion == 'success'))
      id: build
      working-directory: ${{runner.workspace}}/build-${{ matrix.buildType }}
      shell: bash
      run: cmake --build . --parallel 2 --config ${{ matrix.buildType }}

    - name: Prepare success package
      if: (github.event_name == 'push') && (steps.build.conclusion == 'success')
      working-directory: ${{runner.workspace}}/build-${{ matrix.buildType }}
      shell: bash
      run: |
        cmake --install . --config ${{ matrix.buildType }}
        7z a $GITHUB_WORKSPACE/Aria-${{ matrix.os[1] }}.zip $GITHUB_WORKSPACE/package/Aria/

    - name: Clean build folder
      if: (steps.build.conclusion == 'success')
      working-directory: ${{runner.workspace}}/build-${{ matrix.buildType }}
      shell: bash
      run: cmake --build . --config ${{ matrix.buildType }} --target clean

    - name: Upload success package
      if: (github.event_name == 'push') && (steps.build.conclusion == 'success')
      uses: actions/upload-artifact@v2
      with:
        name: Aria-${{ matrix.os[1] }}.zip
        path: ${{ github.workspace }}/Aria-${{ matrix.os[1] }}.zip
